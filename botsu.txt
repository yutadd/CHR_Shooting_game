en:0
      /*for (double i = 0; i < kosu; i=i+1.0) {
                    double _rad = ((i/ kosu) * (PI * 2.0));
                    double fx = (100 * cos(_rad)) + x;
                    double fy = (100 * sin(_rad)) + y;
                    double dx=20*cos(_rad);
                    double dy=20*sin(_rad);

                }*/
                /*
                int kosu=9;
                int kakudo=2;
                float hanni=0.2;
                for (double i = 0; i < kosu; i++) {
                    double _rad = ((i / kosu) * PI * hanni) + kakudo;
                    float fx = (360 * cos(_rad)) + x;
                    float fy = (360 * sin(_rad)) + y;
                    //komes.push_back(kome((float)x, (float)y, image, VECTOR{ (float)(center_x - x) / 140,(float)(center_y - y) / 140 }, false, 0));
                    tamas.push_back(tama(x, y,std::vector<double>{ (fx-x)/60,(fy-y)/60 },tama_gra,pl));

                }
                 */

en:1
/*int kosu=20;
                for (double i = 0; i < kosu; i=i+1.0) {
                    double _rad = ((i/ kosu) * (PI * 2.0));
                    double fx = (100 * cos(_rad)) + x;
                    double fy = (100 * sin(_rad)) + y;
                    double dx=20*cos(_rad);
                    double dy=20*sin(_rad);
                    std::vector<double> v={dx,dy};
                    tamas.push_back(tama(fx, fy,v,tama_gra,pl));
                }*/
                /*int kakudo=7;
float hanni=0.2;
for (double i = 0; i < kosu; i++) {
    double _rad = ((i / kosu) * PI * hanni) + kakudo;
    float fx = (360 * cos(_rad)) + x;
    float fy = (360 * sin(_rad)) + y;
    //komes.push_back(kome((float)x, (float)y, image, VECTOR{ (float)(center_x - x) / 140,(float)(center_y - y) / 140 }, false, 0));
    tamas.push_back(tama(x, y,std::vector<double>{ (fx-x)/60,(fy-y)/60 },tama_gra,pl));
}*/